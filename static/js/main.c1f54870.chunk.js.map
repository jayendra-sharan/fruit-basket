{"version":3,"sources":["components/basket/Error.jsx","components/basket/FruitCard.jsx","components/basket/fruits.js","components/basket/TopNav.jsx","components/basket/FruitBar.jsx","components/basket/FruitBasket.jsx","auth.data.js","util.js","components/login/LoginForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Error","error","hasError","description","errorMessage","type","showIcon","closable","FruitCard","fruit","updateQuanity","className","style","backgroundColor","color","name","quantity","disabled","onClick","shape","FRUITS","id","updateFruitsQuantity","qtyUpdate","fruits","map","f","updateFruitStack","fruitList","slice","TopNav","setLoginStatus","history","useHistory","push","status","user","FruitBar","FruitBasket","loginData","isLoggedIn","useState","updateFruits","fruitStack","updateFruitBasket","setError","permission","top","validQuantityUpdate","title","AUTH_DATA","user1","password","user2","performLogin","username","delay","Math","random","Promise","resolve","reject","setTimeout","found","Object","keys","filter","userData","findUsers","length","LoginForm","isLoading","loginState","updateLoginState","updateState","props","handleChange","e","target","value","onSubmit","preventDefault","then","response","catch","message","autoComplete","placeholder","onChange","htmlType","App","setLoggedIn","exact","path","render","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1f54870.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from \"antd\";\n\nexport default function Error({\n  error\n}) {\n  if (error.hasError) {\n    return <Alert\n      description={error.errorMessage}\n      type=\"error\"\n      showIcon\n      closable\n    />\n  }\n  return null;\n}\n\nError.propTypes = {\n  error: PropTypes.object.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button } from 'antd';\n\nexport default function FruitCard ({\n  fruit,\n  updateQuanity\n}) {\n  return (\n    <Card className=\"fruit-wrapper\" style={{ backgroundColor: fruit.color }}>\n      <p className=\"fruit-name\">{fruit.name}</p>\n      <p className=\"fruit-quantity\">{fruit.quantity}</p>\n      <div className=\"fruits-actions\">\n        <Button\n          disabled={fruit.quantity === 10}\n          onClick={() => updateQuanity(1, fruit)}\n          type=\"primary\"\n          shape=\"circle\"\n        >\n          +\n        </Button>\n        <Button\n          disabled={fruit.quantity === 0}\n          onClick={() => updateQuanity(-1, fruit)}\n          type=\"primary\"\n          shape=\"circle\"\n        >\n          -\n        </Button>\n      </div>\n    </Card>\n  )\n}\n\nFruitCard.propTypes = {\n  fruit: PropTypes.object.isRequired,\n  updateQuanity: PropTypes.func.isRequired\n}\n","const FRUITS = [\n  {\n    name: 'Apple',\n    color: '#f35149',\n    quantity: 10,\n    id: 'APL'\n  },\n  {\n    name: 'Orange',\n    color: '#e69c4b',\n    quantity: 10,\n    id: 'ORNG'\n  },\n  {\n    name: 'Grapes',\n    color: '#5460da',\n    quantity: 10,\n    id: 'GRP'\n  },\n];\n\n/**\n * @description function updates the quantity of the fruit\n * in the list based on the qunatity supplied as a parameter.\n * @param {number} qtyUpdate 1 or -1\n * @param {Object} fruit\n * @param {Array} fruits \n * @returns Array\n */\nconst updateFruitsQuantity = (qtyUpdate, fruit, fruits) => {\n  return fruits.map(f => {\n    if (f.id === fruit.id) {\n      return {\n        ...f,\n        quantity: f.quantity + qtyUpdate\n      }\n    }\n    return f;\n  })\n};\n\n/**\n * @description Updates the fruitstack based on the LIFO principle.\n * @param {Number} qtyUpdate 1 or -1\n * @param {Object} fruit \n * @param {Array} fruitList \n * @returns Array\n */\nconst updateFruitStack = (qtyUpdate, fruit, fruitList) => {\n  if (qtyUpdate === -1) {\n    return [fruit, ...fruitList]; \n  }\n  return fruitList.slice(1);\n}\n\n/**\n * @description Validates the update action. Allow based on LIFO principle.\n * @param {Number} qtyUpdate 1 or -1\n * @param {Object} fruit \n * @param {Array} fruitList \n * @returns Boolean\n */\nconst validQuantityUpdate = (qtyUpdate, fruit, fruitList) => {\n  const top = fruitList[0];\n  if (qtyUpdate === 1 && top.id === fruit.id) {\n    return true;\n  }\n  return false;\n}\n\nexport {\n  FRUITS,\n  updateFruitsQuantity,\n  updateFruitStack,\n  validQuantityUpdate\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router';\n\nexport default function TopNav({\n  setLoginStatus\n}) {\n  const history = useHistory();\n  return (\n    <div className='top-nav'>\n      <h1>All Items</h1>\n      <button type=\"secondary\" onClick={() => {\n        history.push('/login');\n        setLoginStatus({status: false, user: null })\n      }}>\n        Sign Out\n      </button>\n    </div>\n  )\n}\n\nTopNav.propTypes = {\n  setLoginStatus: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FruitBar({\n  fruit\n}) {\n  return (\n    <div\n      style={{ backgroundColor: fruit.color }}\n      className='fruit-bar' />\n  )\n}\n\nFruitBar.propTypes = {\n  fruit: PropTypes.object.isRequired\n}\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport Error from './Error';\nimport { Card } from \"antd\";\nimport FruitCard from './FruitCard'\nimport { FRUITS, updateFruitsQuantity, updateFruitStack, validQuantityUpdate } from \"./fruits\";\nimport { useHistory } from \"react-router\";\nimport TopNav from \"./TopNav\";\nimport FruitBar from \"./FruitBar\";\n\nexport default function FruitBasket ({\n  loginData,\n  setLoginStatus\n}) {\n  const { isLoggedIn, user } = loginData;\n  const history = useHistory();\n\n  // redirect to login if user is not logged in.\n  if (!isLoggedIn) {\n    history.push('/login')\n  }\n\n  const [fruits, updateFruits] = useState(FRUITS);\n  const [fruitStack, updateFruitBasket] = useState([]);\n  const [error, setError] = useState({\n    hasError: false,\n    errorMessage: ''\n  });\n\n\n  const allowed = (u) => {\n    if (u.permission === \"all\") {\n      return true;\n    }\n    return false;\n  }\n\n  const updateQuanity = (qtyUpdate, fruit) => {\n    setError({\n      hasError: false,\n      errorMessage: ''\n    });\n    if (!allowed(user)) {\n      setError({\n        hasError: true,\n        errorMessage: 'You are not authorised to update basket'\n      });\n      return;\n    }\n    switch(qtyUpdate) {\n      case 1:\n        if (validQuantityUpdate(qtyUpdate, fruit, fruitStack)) {\n          updateFruits(updateFruitsQuantity(qtyUpdate, fruit, fruits));\n          updateFruitBasket(updateFruitStack(qtyUpdate, fruit, fruitStack));    \n        } else {\n          setError({\n            hasError: true,\n            errorMessage: 'Only the fruit on top can be removed.'\n          });\n        }\n        return;\n      case -1:\n        updateFruits(updateFruitsQuantity(qtyUpdate, fruit, fruits));\n        updateFruitBasket(updateFruitStack(qtyUpdate, fruit, fruitStack));  \n        return;\n      default:\n        return;\n    }\n  }\n  return (\n    <>\n      <TopNav setLoginStatus={setLoginStatus} />\n\n      <div className=\"fruits-home\">      \n        {\n          fruits.map(fruit => (\n            <FruitCard\n              updateQuanity={updateQuanity}\n              key={fruit.id}\n              fruit={fruit} />\n            )\n          )\n        }\n      </div>\n\n      <div className=\"fruits-updates\">\n        <Card title=\"Basket Stack\">\n            {\n              fruitStack.map(f => <FruitBar key={`${f.id}.${f.quantity}`} fruit={f} />)\n            }\n        </Card>\n      </div>\n\n      <Error error={error} />\n    </>\n  )\n}\n\nFruitBasket.propTypes = {\n  loginData: PropTypes.shape({\n    isLoggedIn: PropTypes.bool.isRequired,\n    user: PropTypes.object\n  }),\n  setLoginStatus: PropTypes.func.isRequired\n}","const AUTH_DATA = {\n  user1: {\n    name: \"Admin\",\n    permission: \"all\",\n    password: \"Admin\"\n  },\n  user2: {\n    name: \"MyName\",\n    permission: \"none\",\n    password: \"test\"\n  }\n}\n\nexport default AUTH_DATA;\n","import AUTH_DATA from './auth.data';\n\n// function to find the exact match of username and password\n// from the auth_data.\nconst findUsers = (username, password) => {\n  return Object.keys(AUTH_DATA).filter(user => {\n    const userData = AUTH_DATA[user];\n    if (userData.name === username && userData.password === password) {\n      return true;\n    }\n    return false;\n  })\n}\n\nexport function performLogin({ username, password }) {\n  const delay = (0.5 + Math.random() * 2) * 1000;\n  return new Promise((resolve, reject) => {\n    setTimeout(function () {\n      const found = findUsers(username, password);\n      if (found.length) {\n        resolve(AUTH_DATA[found[0]]);\n      } else {\n        reject(new Error(\"Invalid credentials\"));\n      }\n    }, delay);\n  });\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Input, Button } from 'antd';\nimport { performLogin } from '../../util';\nimport { useHistory } from 'react-router';\n\nexport default function LoginForm({\n  setLoginStatus\n}) {\n  const history = useHistory();\n  const [loginState, updateLoginState] = useState({\n    username: '',\n    password: '',\n    errorMessage: '',\n    isLoading: false,\n  })\n\n  /**\n   * Performs partial state update\n   * @param {Object} props \n   */\n  const updateState = (props) => {\n    updateLoginState({\n      ...loginState,\n      ...props\n    })\n  }\n\n  /**\n   * On change event handler\n   * @param {Event} e \n   */\n  const handleChange = (e) => {\n    updateState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  /**\n   * Submit button click handler\n   */\n  const handleClick = (e) => {\n    e.preventDefault();\n    updateState({\n      isLoading: true\n    });\n    const { username, password } = loginState;\n    performLogin({\n      username,\n      password\n    }).then (response => {\n      updateState({\n        isLoading: false,\n        username: '',\n        password: '',\n        errorMessage: '',\n      })\n      if (response) {\n        setLoginStatus({\n          status: true,\n          user: response\n        })\n        history.push('/home')\n      }\n    }).catch (error => {\n      updateState({\n        isLoading: false,\n        errorMessage: error.message,\n        username: '',\n        password: ''\n      })\n    })\n  }\n\n  const { username, password, errorMessage, isLoading } = loginState;\n  \n  const disableLogin = () => {\n    return !username || !password || isLoading;\n  }\n\n  return (\n    <Card title=\"Login\" className=\"login-form\">\n      <form onSubmit={handleClick}>\n        <Input\n          autoComplete=\"username\"\n          id=\"username\"\n          placeholder=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={handleChange}\n        />\n        <Input\n          autoComplete=\"current-password\"\n          id=\"password\"\n          placeholder=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={handleChange}\n        />\n        <Button\n          disabled={disableLogin()}\n          htmlType=\"submit\"\n          type=\"primary\"\n        >{\n          isLoading ? 'Logging In...' : 'Submit'\n        }</Button>\n      </form>\n      <div className=\"login-error\">\n        { errorMessage }\n      </div>\n    </Card>\n  )\n}\n\nLoginForm.propTypes = {\n  setLoginStatus: PropTypes.func.isRequired\n}\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.css';\nimport { FruitBasket } from './components/basket';\nimport { Login } from './components/login';\n\nfunction App() {\n  const [loginData, setLoggedIn] = useState({\n    isLoggedIn: false,\n    user: null,\n  });\n\n  const setLoginStatus = ({status, user}) => {\n    setLoggedIn({\n      isLoggedIn: status,\n      user\n    })\n  }\n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/login\"/>\n          )}/>\n          <Route path=\"/login\">\n            <Login\n              setLoginStatus={setLoginStatus}\n              isLoggedIn={loginData.isLoggedIn} />\n          </Route>\n          <Route path=\"/home\">\n            <FruitBasket\n              setLoginStatus={setLoginStatus}\n              loginData={loginData}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}